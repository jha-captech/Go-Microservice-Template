// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/captechconsulting/go-microservice-templates/lambda/internal/model"
)

// MockUserUpdater is an autogenerated mock type for the userUpdater type
type MockUserUpdater struct {
	mock.Mock
}

type MockUserUpdater_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserUpdater) EXPECT() *MockUserUpdater_Expecter {
	return &MockUserUpdater_Expecter{mock: &_m.Mock}
}

// UpdateUser provides a mock function with given fields: ctx, ID, user
func (_m *MockUserUpdater) UpdateUser(ctx context.Context, ID int, user model.User) (model.User, error) {
	ret := _m.Called(ctx, ID, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, model.User) (model.User, error)); ok {
		return rf(ctx, ID, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, model.User) model.User); ok {
		r0 = rf(ctx, ID, user)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, model.User) error); ok {
		r1 = rf(ctx, ID, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserUpdater_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockUserUpdater_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - ID int
//   - user model.User
func (_e *MockUserUpdater_Expecter) UpdateUser(ctx interface{}, ID interface{}, user interface{}) *MockUserUpdater_UpdateUser_Call {
	return &MockUserUpdater_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, ID, user)}
}

func (_c *MockUserUpdater_UpdateUser_Call) Run(run func(ctx context.Context, ID int, user model.User)) *MockUserUpdater_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(model.User))
	})
	return _c
}

func (_c *MockUserUpdater_UpdateUser_Call) Return(_a0 model.User, _a1 error) *MockUserUpdater_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserUpdater_UpdateUser_Call) RunAndReturn(run func(context.Context, int, model.User) (model.User, error)) *MockUserUpdater_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserUpdater creates a new instance of MockUserUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserUpdater {
	mock := &MockUserUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
